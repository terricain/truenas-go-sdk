/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// CronJob struct for CronJob
type CronJob struct {
	Id *int32 `json:"id,omitempty"`
	User *string `json:"user,omitempty"`
	Command *string `json:"command,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Stdout *bool `json:"stdout,omitempty"`
	Stderr *bool `json:"stderr,omitempty"`
	Schedule *CronJobSchedule `json:"schedule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CronJob CronJob

// NewCronJob instantiates a new CronJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCronJob() *CronJob {
	this := CronJob{}
	return &this
}

// NewCronJobWithDefaults instantiates a new CronJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCronJobWithDefaults() *CronJob {
	this := CronJob{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CronJob) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronJob) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CronJob) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CronJob) SetId(v int32) {
	o.Id = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CronJob) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronJob) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CronJob) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *CronJob) SetUser(v string) {
	o.User = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *CronJob) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronJob) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *CronJob) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *CronJob) SetCommand(v string) {
	o.Command = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CronJob) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronJob) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CronJob) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CronJob) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CronJob) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronJob) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CronJob) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CronJob) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStdout returns the Stdout field value if set, zero value otherwise.
func (o *CronJob) GetStdout() bool {
	if o == nil || o.Stdout == nil {
		var ret bool
		return ret
	}
	return *o.Stdout
}

// GetStdoutOk returns a tuple with the Stdout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronJob) GetStdoutOk() (*bool, bool) {
	if o == nil || o.Stdout == nil {
		return nil, false
	}
	return o.Stdout, true
}

// HasStdout returns a boolean if a field has been set.
func (o *CronJob) HasStdout() bool {
	if o != nil && o.Stdout != nil {
		return true
	}

	return false
}

// SetStdout gets a reference to the given bool and assigns it to the Stdout field.
func (o *CronJob) SetStdout(v bool) {
	o.Stdout = &v
}

// GetStderr returns the Stderr field value if set, zero value otherwise.
func (o *CronJob) GetStderr() bool {
	if o == nil || o.Stderr == nil {
		var ret bool
		return ret
	}
	return *o.Stderr
}

// GetStderrOk returns a tuple with the Stderr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronJob) GetStderrOk() (*bool, bool) {
	if o == nil || o.Stderr == nil {
		return nil, false
	}
	return o.Stderr, true
}

// HasStderr returns a boolean if a field has been set.
func (o *CronJob) HasStderr() bool {
	if o != nil && o.Stderr != nil {
		return true
	}

	return false
}

// SetStderr gets a reference to the given bool and assigns it to the Stderr field.
func (o *CronJob) SetStderr(v bool) {
	o.Stderr = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *CronJob) GetSchedule() CronJobSchedule {
	if o == nil || o.Schedule == nil {
		var ret CronJobSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronJob) GetScheduleOk() (*CronJobSchedule, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *CronJob) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given CronJobSchedule and assigns it to the Schedule field.
func (o *CronJob) SetSchedule(v CronJobSchedule) {
	o.Schedule = &v
}

func (o CronJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Stdout != nil {
		toSerialize["stdout"] = o.Stdout
	}
	if o.Stderr != nil {
		toSerialize["stderr"] = o.Stderr
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CronJob) UnmarshalJSON(bytes []byte) (err error) {
	varCronJob := _CronJob{}

	if err = json.Unmarshal(bytes, &varCronJob); err == nil {
		*o = CronJob(varCronJob)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "user")
		delete(additionalProperties, "command")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "stdout")
		delete(additionalProperties, "stderr")
		delete(additionalProperties, "schedule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCronJob struct {
	value *CronJob
	isSet bool
}

func (v NullableCronJob) Get() *CronJob {
	return v.value
}

func (v *NullableCronJob) Set(val *CronJob) {
	v.value = val
	v.isSet = true
}

func (v NullableCronJob) IsSet() bool {
	return v.isSet
}

func (v *NullableCronJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCronJob(val *CronJob) *NullableCronJob {
	return &NullableCronJob{value: val, isSet: true}
}

func (v NullableCronJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCronJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


