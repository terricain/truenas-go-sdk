/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
	"fmt"
)

// checks if the ISCSIPortal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ISCSIPortal{}

// ISCSIPortal struct for ISCSIPortal
type ISCSIPortal struct {
	Id                  int32                    `json:"id"`
	Tag                 int32                    `json:"tag"`
	Comment             string                   `json:"comment"`
	DiscoveryAuthmethod string                   `json:"discovery_authmethod"`
	DiscoveryAuthgroup  NullableInt32            `json:"discovery_authgroup"`
	Listen              []ISCSIPortalListenInner `json:"listen"`
}

type _ISCSIPortal ISCSIPortal

// NewISCSIPortal instantiates a new ISCSIPortal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewISCSIPortal(id int32, tag int32, comment string, discoveryAuthmethod string, discoveryAuthgroup NullableInt32, listen []ISCSIPortalListenInner) *ISCSIPortal {
	this := ISCSIPortal{}
	this.Id = id
	this.Tag = tag
	this.Comment = comment
	this.DiscoveryAuthmethod = discoveryAuthmethod
	this.DiscoveryAuthgroup = discoveryAuthgroup
	this.Listen = listen
	return &this
}

// NewISCSIPortalWithDefaults instantiates a new ISCSIPortal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewISCSIPortalWithDefaults() *ISCSIPortal {
	this := ISCSIPortal{}
	return &this
}

// GetId returns the Id field value
func (o *ISCSIPortal) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ISCSIPortal) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ISCSIPortal) SetId(v int32) {
	o.Id = v
}

// GetTag returns the Tag field value
func (o *ISCSIPortal) GetTag() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *ISCSIPortal) GetTagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *ISCSIPortal) SetTag(v int32) {
	o.Tag = v
}

// GetComment returns the Comment field value
func (o *ISCSIPortal) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *ISCSIPortal) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *ISCSIPortal) SetComment(v string) {
	o.Comment = v
}

// GetDiscoveryAuthmethod returns the DiscoveryAuthmethod field value
func (o *ISCSIPortal) GetDiscoveryAuthmethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscoveryAuthmethod
}

// GetDiscoveryAuthmethodOk returns a tuple with the DiscoveryAuthmethod field value
// and a boolean to check if the value has been set.
func (o *ISCSIPortal) GetDiscoveryAuthmethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscoveryAuthmethod, true
}

// SetDiscoveryAuthmethod sets field value
func (o *ISCSIPortal) SetDiscoveryAuthmethod(v string) {
	o.DiscoveryAuthmethod = v
}

// GetDiscoveryAuthgroup returns the DiscoveryAuthgroup field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ISCSIPortal) GetDiscoveryAuthgroup() int32 {
	if o == nil || o.DiscoveryAuthgroup.Get() == nil {
		var ret int32
		return ret
	}

	return *o.DiscoveryAuthgroup.Get()
}

// GetDiscoveryAuthgroupOk returns a tuple with the DiscoveryAuthgroup field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ISCSIPortal) GetDiscoveryAuthgroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscoveryAuthgroup.Get(), o.DiscoveryAuthgroup.IsSet()
}

// SetDiscoveryAuthgroup sets field value
func (o *ISCSIPortal) SetDiscoveryAuthgroup(v int32) {
	o.DiscoveryAuthgroup.Set(&v)
}

// GetListen returns the Listen field value
func (o *ISCSIPortal) GetListen() []ISCSIPortalListenInner {
	if o == nil {
		var ret []ISCSIPortalListenInner
		return ret
	}

	return o.Listen
}

// GetListenOk returns a tuple with the Listen field value
// and a boolean to check if the value has been set.
func (o *ISCSIPortal) GetListenOk() ([]ISCSIPortalListenInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Listen, true
}

// SetListen sets field value
func (o *ISCSIPortal) SetListen(v []ISCSIPortalListenInner) {
	o.Listen = v
}

func (o ISCSIPortal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ISCSIPortal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["tag"] = o.Tag
	toSerialize["comment"] = o.Comment
	toSerialize["discovery_authmethod"] = o.DiscoveryAuthmethod
	toSerialize["discovery_authgroup"] = o.DiscoveryAuthgroup.Get()
	toSerialize["listen"] = o.Listen
	return toSerialize, nil
}

func (o *ISCSIPortal) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"tag",
		"comment",
		"discovery_authmethod",
		"discovery_authgroup",
		"listen",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varISCSIPortal := _ISCSIPortal{}

	err = json.Unmarshal(bytes, &varISCSIPortal)

	if err != nil {
		return err
	}

	*o = ISCSIPortal(varISCSIPortal)

	return err
}

type NullableISCSIPortal struct {
	value *ISCSIPortal
	isSet bool
}

func (v NullableISCSIPortal) Get() *ISCSIPortal {
	return v.value
}

func (v *NullableISCSIPortal) Set(val *ISCSIPortal) {
	v.value = val
	v.isSet = true
}

func (v NullableISCSIPortal) IsSet() bool {
	return v.isSet
}

func (v *NullableISCSIPortal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableISCSIPortal(val *ISCSIPortal) *NullableISCSIPortal {
	return &NullableISCSIPortal{value: val, isSet: true}
}

func (v NullableISCSIPortal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableISCSIPortal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
