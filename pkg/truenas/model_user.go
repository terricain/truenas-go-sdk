/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
	"fmt"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Id                   int32                  `json:"id"`
	Uid                  *int32                 `json:"uid,omitempty"`
	Username             string                 `json:"username"`
	Unixhash             *string                `json:"unixhash,omitempty"`
	Smbhash              *string                `json:"smbhash,omitempty"`
	Home                 *string                `json:"home,omitempty"`
	Shell                *string                `json:"shell,omitempty"`
	FullName             string                 `json:"full_name"`
	Builtin              *bool                  `json:"builtin,omitempty"`
	Smb                  *bool                  `json:"smb,omitempty"`
	PasswordDisabled     *bool                  `json:"password_disabled,omitempty"`
	Locked               *bool                  `json:"locked,omitempty"`
	Sudo                 *bool                  `json:"sudo,omitempty"`
	SudoNopasswd         *bool                  `json:"sudo_nopasswd,omitempty"`
	SudoCommands         []string               `json:"sudo_commands,omitempty"`
	MicrosoftAccount     *bool                  `json:"microsoft_account,omitempty"`
	Attributes           map[string]interface{} `json:"attributes,omitempty"`
	Email                NullableString         `json:"email,omitempty"`
	Group                *UserGroup             `json:"group,omitempty"`
	Groups               []int32                `json:"groups,omitempty"`
	Sshpubkey            NullableString         `json:"sshpubkey,omitempty"`
	Local                *bool                  `json:"local,omitempty"`
	IdTypeBoth           *bool                  `json:"id_type_both,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(id int32, username string, fullName string) *User {
	this := User{}
	this.Id = id
	this.Username = username
	this.FullName = fullName
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value
func (o *User) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v int32) {
	o.Id = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *User) GetUid() int32 {
	if o == nil || IsNil(o.Uid) {
		var ret int32
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUidOk() (*int32, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *User) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given int32 and assigns it to the Uid field.
func (o *User) SetUid(v int32) {
	o.Uid = &v
}

// GetUsername returns the Username field value
func (o *User) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *User) SetUsername(v string) {
	o.Username = v
}

// GetUnixhash returns the Unixhash field value if set, zero value otherwise.
func (o *User) GetUnixhash() string {
	if o == nil || IsNil(o.Unixhash) {
		var ret string
		return ret
	}
	return *o.Unixhash
}

// GetUnixhashOk returns a tuple with the Unixhash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUnixhashOk() (*string, bool) {
	if o == nil || IsNil(o.Unixhash) {
		return nil, false
	}
	return o.Unixhash, true
}

// HasUnixhash returns a boolean if a field has been set.
func (o *User) HasUnixhash() bool {
	if o != nil && !IsNil(o.Unixhash) {
		return true
	}

	return false
}

// SetUnixhash gets a reference to the given string and assigns it to the Unixhash field.
func (o *User) SetUnixhash(v string) {
	o.Unixhash = &v
}

// GetSmbhash returns the Smbhash field value if set, zero value otherwise.
func (o *User) GetSmbhash() string {
	if o == nil || IsNil(o.Smbhash) {
		var ret string
		return ret
	}
	return *o.Smbhash
}

// GetSmbhashOk returns a tuple with the Smbhash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSmbhashOk() (*string, bool) {
	if o == nil || IsNil(o.Smbhash) {
		return nil, false
	}
	return o.Smbhash, true
}

// HasSmbhash returns a boolean if a field has been set.
func (o *User) HasSmbhash() bool {
	if o != nil && !IsNil(o.Smbhash) {
		return true
	}

	return false
}

// SetSmbhash gets a reference to the given string and assigns it to the Smbhash field.
func (o *User) SetSmbhash(v string) {
	o.Smbhash = &v
}

// GetHome returns the Home field value if set, zero value otherwise.
func (o *User) GetHome() string {
	if o == nil || IsNil(o.Home) {
		var ret string
		return ret
	}
	return *o.Home
}

// GetHomeOk returns a tuple with the Home field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHomeOk() (*string, bool) {
	if o == nil || IsNil(o.Home) {
		return nil, false
	}
	return o.Home, true
}

// HasHome returns a boolean if a field has been set.
func (o *User) HasHome() bool {
	if o != nil && !IsNil(o.Home) {
		return true
	}

	return false
}

// SetHome gets a reference to the given string and assigns it to the Home field.
func (o *User) SetHome(v string) {
	o.Home = &v
}

// GetShell returns the Shell field value if set, zero value otherwise.
func (o *User) GetShell() string {
	if o == nil || IsNil(o.Shell) {
		var ret string
		return ret
	}
	return *o.Shell
}

// GetShellOk returns a tuple with the Shell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetShellOk() (*string, bool) {
	if o == nil || IsNil(o.Shell) {
		return nil, false
	}
	return o.Shell, true
}

// HasShell returns a boolean if a field has been set.
func (o *User) HasShell() bool {
	if o != nil && !IsNil(o.Shell) {
		return true
	}

	return false
}

// SetShell gets a reference to the given string and assigns it to the Shell field.
func (o *User) SetShell(v string) {
	o.Shell = &v
}

// GetFullName returns the FullName field value
func (o *User) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *User) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *User) SetFullName(v string) {
	o.FullName = v
}

// GetBuiltin returns the Builtin field value if set, zero value otherwise.
func (o *User) GetBuiltin() bool {
	if o == nil || IsNil(o.Builtin) {
		var ret bool
		return ret
	}
	return *o.Builtin
}

// GetBuiltinOk returns a tuple with the Builtin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBuiltinOk() (*bool, bool) {
	if o == nil || IsNil(o.Builtin) {
		return nil, false
	}
	return o.Builtin, true
}

// HasBuiltin returns a boolean if a field has been set.
func (o *User) HasBuiltin() bool {
	if o != nil && !IsNil(o.Builtin) {
		return true
	}

	return false
}

// SetBuiltin gets a reference to the given bool and assigns it to the Builtin field.
func (o *User) SetBuiltin(v bool) {
	o.Builtin = &v
}

// GetSmb returns the Smb field value if set, zero value otherwise.
func (o *User) GetSmb() bool {
	if o == nil || IsNil(o.Smb) {
		var ret bool
		return ret
	}
	return *o.Smb
}

// GetSmbOk returns a tuple with the Smb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSmbOk() (*bool, bool) {
	if o == nil || IsNil(o.Smb) {
		return nil, false
	}
	return o.Smb, true
}

// HasSmb returns a boolean if a field has been set.
func (o *User) HasSmb() bool {
	if o != nil && !IsNil(o.Smb) {
		return true
	}

	return false
}

// SetSmb gets a reference to the given bool and assigns it to the Smb field.
func (o *User) SetSmb(v bool) {
	o.Smb = &v
}

// GetPasswordDisabled returns the PasswordDisabled field value if set, zero value otherwise.
func (o *User) GetPasswordDisabled() bool {
	if o == nil || IsNil(o.PasswordDisabled) {
		var ret bool
		return ret
	}
	return *o.PasswordDisabled
}

// GetPasswordDisabledOk returns a tuple with the PasswordDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPasswordDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PasswordDisabled) {
		return nil, false
	}
	return o.PasswordDisabled, true
}

// HasPasswordDisabled returns a boolean if a field has been set.
func (o *User) HasPasswordDisabled() bool {
	if o != nil && !IsNil(o.PasswordDisabled) {
		return true
	}

	return false
}

// SetPasswordDisabled gets a reference to the given bool and assigns it to the PasswordDisabled field.
func (o *User) SetPasswordDisabled(v bool) {
	o.PasswordDisabled = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *User) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *User) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *User) SetLocked(v bool) {
	o.Locked = &v
}

// GetSudo returns the Sudo field value if set, zero value otherwise.
func (o *User) GetSudo() bool {
	if o == nil || IsNil(o.Sudo) {
		var ret bool
		return ret
	}
	return *o.Sudo
}

// GetSudoOk returns a tuple with the Sudo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSudoOk() (*bool, bool) {
	if o == nil || IsNil(o.Sudo) {
		return nil, false
	}
	return o.Sudo, true
}

// HasSudo returns a boolean if a field has been set.
func (o *User) HasSudo() bool {
	if o != nil && !IsNil(o.Sudo) {
		return true
	}

	return false
}

// SetSudo gets a reference to the given bool and assigns it to the Sudo field.
func (o *User) SetSudo(v bool) {
	o.Sudo = &v
}

// GetSudoNopasswd returns the SudoNopasswd field value if set, zero value otherwise.
func (o *User) GetSudoNopasswd() bool {
	if o == nil || IsNil(o.SudoNopasswd) {
		var ret bool
		return ret
	}
	return *o.SudoNopasswd
}

// GetSudoNopasswdOk returns a tuple with the SudoNopasswd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSudoNopasswdOk() (*bool, bool) {
	if o == nil || IsNil(o.SudoNopasswd) {
		return nil, false
	}
	return o.SudoNopasswd, true
}

// HasSudoNopasswd returns a boolean if a field has been set.
func (o *User) HasSudoNopasswd() bool {
	if o != nil && !IsNil(o.SudoNopasswd) {
		return true
	}

	return false
}

// SetSudoNopasswd gets a reference to the given bool and assigns it to the SudoNopasswd field.
func (o *User) SetSudoNopasswd(v bool) {
	o.SudoNopasswd = &v
}

// GetSudoCommands returns the SudoCommands field value if set, zero value otherwise.
func (o *User) GetSudoCommands() []string {
	if o == nil || IsNil(o.SudoCommands) {
		var ret []string
		return ret
	}
	return o.SudoCommands
}

// GetSudoCommandsOk returns a tuple with the SudoCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSudoCommandsOk() ([]string, bool) {
	if o == nil || IsNil(o.SudoCommands) {
		return nil, false
	}
	return o.SudoCommands, true
}

// HasSudoCommands returns a boolean if a field has been set.
func (o *User) HasSudoCommands() bool {
	if o != nil && !IsNil(o.SudoCommands) {
		return true
	}

	return false
}

// SetSudoCommands gets a reference to the given []string and assigns it to the SudoCommands field.
func (o *User) SetSudoCommands(v []string) {
	o.SudoCommands = v
}

// GetMicrosoftAccount returns the MicrosoftAccount field value if set, zero value otherwise.
func (o *User) GetMicrosoftAccount() bool {
	if o == nil || IsNil(o.MicrosoftAccount) {
		var ret bool
		return ret
	}
	return *o.MicrosoftAccount
}

// GetMicrosoftAccountOk returns a tuple with the MicrosoftAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetMicrosoftAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.MicrosoftAccount) {
		return nil, false
	}
	return o.MicrosoftAccount, true
}

// HasMicrosoftAccount returns a boolean if a field has been set.
func (o *User) HasMicrosoftAccount() bool {
	if o != nil && !IsNil(o.MicrosoftAccount) {
		return true
	}

	return false
}

// SetMicrosoftAccount gets a reference to the given bool and assigns it to the MicrosoftAccount field.
func (o *User) SetMicrosoftAccount(v bool) {
	o.MicrosoftAccount = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *User) GetAttributes() map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *User) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *User) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email.Set(&v)
}

// SetEmailNil sets the value for Email to be an explicit nil
func (o *User) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *User) UnsetEmail() {
	o.Email.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *User) GetGroup() UserGroup {
	if o == nil || IsNil(o.Group) {
		var ret UserGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetGroupOk() (*UserGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *User) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given UserGroup and assigns it to the Group field.
func (o *User) SetGroup(v UserGroup) {
	o.Group = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *User) GetGroups() []int32 {
	if o == nil || IsNil(o.Groups) {
		var ret []int32
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *User) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []int32 and assigns it to the Groups field.
func (o *User) SetGroups(v []int32) {
	o.Groups = v
}

// GetSshpubkey returns the Sshpubkey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetSshpubkey() string {
	if o == nil || IsNil(o.Sshpubkey.Get()) {
		var ret string
		return ret
	}
	return *o.Sshpubkey.Get()
}

// GetSshpubkeyOk returns a tuple with the Sshpubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetSshpubkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sshpubkey.Get(), o.Sshpubkey.IsSet()
}

// HasSshpubkey returns a boolean if a field has been set.
func (o *User) HasSshpubkey() bool {
	if o != nil && o.Sshpubkey.IsSet() {
		return true
	}

	return false
}

// SetSshpubkey gets a reference to the given NullableString and assigns it to the Sshpubkey field.
func (o *User) SetSshpubkey(v string) {
	o.Sshpubkey.Set(&v)
}

// SetSshpubkeyNil sets the value for Sshpubkey to be an explicit nil
func (o *User) SetSshpubkeyNil() {
	o.Sshpubkey.Set(nil)
}

// UnsetSshpubkey ensures that no value is present for Sshpubkey, not even an explicit nil
func (o *User) UnsetSshpubkey() {
	o.Sshpubkey.Unset()
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *User) GetLocal() bool {
	if o == nil || IsNil(o.Local) {
		var ret bool
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *User) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given bool and assigns it to the Local field.
func (o *User) SetLocal(v bool) {
	o.Local = &v
}

// GetIdTypeBoth returns the IdTypeBoth field value if set, zero value otherwise.
func (o *User) GetIdTypeBoth() bool {
	if o == nil || IsNil(o.IdTypeBoth) {
		var ret bool
		return ret
	}
	return *o.IdTypeBoth
}

// GetIdTypeBothOk returns a tuple with the IdTypeBoth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdTypeBothOk() (*bool, bool) {
	if o == nil || IsNil(o.IdTypeBoth) {
		return nil, false
	}
	return o.IdTypeBoth, true
}

// HasIdTypeBoth returns a boolean if a field has been set.
func (o *User) HasIdTypeBoth() bool {
	if o != nil && !IsNil(o.IdTypeBoth) {
		return true
	}

	return false
}

// SetIdTypeBoth gets a reference to the given bool and assigns it to the IdTypeBoth field.
func (o *User) SetIdTypeBoth(v bool) {
	o.IdTypeBoth = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	toSerialize["username"] = o.Username
	if !IsNil(o.Unixhash) {
		toSerialize["unixhash"] = o.Unixhash
	}
	if !IsNil(o.Smbhash) {
		toSerialize["smbhash"] = o.Smbhash
	}
	if !IsNil(o.Home) {
		toSerialize["home"] = o.Home
	}
	if !IsNil(o.Shell) {
		toSerialize["shell"] = o.Shell
	}
	toSerialize["full_name"] = o.FullName
	if !IsNil(o.Builtin) {
		toSerialize["builtin"] = o.Builtin
	}
	if !IsNil(o.Smb) {
		toSerialize["smb"] = o.Smb
	}
	if !IsNil(o.PasswordDisabled) {
		toSerialize["password_disabled"] = o.PasswordDisabled
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.Sudo) {
		toSerialize["sudo"] = o.Sudo
	}
	if !IsNil(o.SudoNopasswd) {
		toSerialize["sudo_nopasswd"] = o.SudoNopasswd
	}
	if !IsNil(o.SudoCommands) {
		toSerialize["sudo_commands"] = o.SudoCommands
	}
	if !IsNil(o.MicrosoftAccount) {
		toSerialize["microsoft_account"] = o.MicrosoftAccount
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if o.Sshpubkey.IsSet() {
		toSerialize["sshpubkey"] = o.Sshpubkey.Get()
	}
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	if !IsNil(o.IdTypeBoth) {
		toSerialize["id_type_both"] = o.IdTypeBoth
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *User) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"username",
		"full_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUser := _User{}

	err = json.Unmarshal(bytes, &varUser)

	if err != nil {
		return err
	}

	*o = User(varUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "uid")
		delete(additionalProperties, "username")
		delete(additionalProperties, "unixhash")
		delete(additionalProperties, "smbhash")
		delete(additionalProperties, "home")
		delete(additionalProperties, "shell")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "builtin")
		delete(additionalProperties, "smb")
		delete(additionalProperties, "password_disabled")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "sudo")
		delete(additionalProperties, "sudo_nopasswd")
		delete(additionalProperties, "sudo_commands")
		delete(additionalProperties, "microsoft_account")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "email")
		delete(additionalProperties, "group")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "sshpubkey")
		delete(additionalProperties, "local")
		delete(additionalProperties, "id_type_both")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
