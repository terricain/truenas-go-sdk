/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// checks if the UpdateDatasetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDatasetParams{}

// UpdateDatasetParams struct for UpdateDatasetParams
type UpdateDatasetParams struct {
	Atime                *string `json:"atime,omitempty"`
	Aclmode              *string `json:"aclmode,omitempty"`
	Comments             *string `json:"comments,omitempty"`
	Compression          *string `json:"compression,omitempty"`
	Copies               *int32  `json:"copies,omitempty"`
	Deduplication        *string `json:"deduplication,omitempty"`
	Exec                 *string `json:"exec,omitempty"`
	ForceSize            *bool   `json:"force_size,omitempty"`
	Quota                *int64  `json:"quota,omitempty"`
	Readonly             *string `json:"readonly,omitempty"`
	Recordsize           *string `json:"recordsize,omitempty"`
	Refquota             *int64  `json:"refquota,omitempty"`
	Refreservation       *int64  `json:"refreservation,omitempty"`
	Volsize              *int64  `json:"volsize,omitempty"`
	Snapdir              *string `json:"snapdir,omitempty"`
	Sync                 *string `json:"sync,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateDatasetParams UpdateDatasetParams

// NewUpdateDatasetParams instantiates a new UpdateDatasetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDatasetParams() *UpdateDatasetParams {
	this := UpdateDatasetParams{}
	return &this
}

// NewUpdateDatasetParamsWithDefaults instantiates a new UpdateDatasetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDatasetParamsWithDefaults() *UpdateDatasetParams {
	this := UpdateDatasetParams{}
	return &this
}

// GetAtime returns the Atime field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetAtime() string {
	if o == nil || IsNil(o.Atime) {
		var ret string
		return ret
	}
	return *o.Atime
}

// GetAtimeOk returns a tuple with the Atime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetAtimeOk() (*string, bool) {
	if o == nil || IsNil(o.Atime) {
		return nil, false
	}
	return o.Atime, true
}

// HasAtime returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasAtime() bool {
	if o != nil && !IsNil(o.Atime) {
		return true
	}

	return false
}

// SetAtime gets a reference to the given string and assigns it to the Atime field.
func (o *UpdateDatasetParams) SetAtime(v string) {
	o.Atime = &v
}

// GetAclmode returns the Aclmode field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetAclmode() string {
	if o == nil || IsNil(o.Aclmode) {
		var ret string
		return ret
	}
	return *o.Aclmode
}

// GetAclmodeOk returns a tuple with the Aclmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetAclmodeOk() (*string, bool) {
	if o == nil || IsNil(o.Aclmode) {
		return nil, false
	}
	return o.Aclmode, true
}

// HasAclmode returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasAclmode() bool {
	if o != nil && !IsNil(o.Aclmode) {
		return true
	}

	return false
}

// SetAclmode gets a reference to the given string and assigns it to the Aclmode field.
func (o *UpdateDatasetParams) SetAclmode(v string) {
	o.Aclmode = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *UpdateDatasetParams) SetComments(v string) {
	o.Comments = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *UpdateDatasetParams) SetCompression(v string) {
	o.Compression = &v
}

// GetCopies returns the Copies field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetCopies() int32 {
	if o == nil || IsNil(o.Copies) {
		var ret int32
		return ret
	}
	return *o.Copies
}

// GetCopiesOk returns a tuple with the Copies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetCopiesOk() (*int32, bool) {
	if o == nil || IsNil(o.Copies) {
		return nil, false
	}
	return o.Copies, true
}

// HasCopies returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasCopies() bool {
	if o != nil && !IsNil(o.Copies) {
		return true
	}

	return false
}

// SetCopies gets a reference to the given int32 and assigns it to the Copies field.
func (o *UpdateDatasetParams) SetCopies(v int32) {
	o.Copies = &v
}

// GetDeduplication returns the Deduplication field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetDeduplication() string {
	if o == nil || IsNil(o.Deduplication) {
		var ret string
		return ret
	}
	return *o.Deduplication
}

// GetDeduplicationOk returns a tuple with the Deduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetDeduplicationOk() (*string, bool) {
	if o == nil || IsNil(o.Deduplication) {
		return nil, false
	}
	return o.Deduplication, true
}

// HasDeduplication returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasDeduplication() bool {
	if o != nil && !IsNil(o.Deduplication) {
		return true
	}

	return false
}

// SetDeduplication gets a reference to the given string and assigns it to the Deduplication field.
func (o *UpdateDatasetParams) SetDeduplication(v string) {
	o.Deduplication = &v
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetExec() string {
	if o == nil || IsNil(o.Exec) {
		var ret string
		return ret
	}
	return *o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetExecOk() (*string, bool) {
	if o == nil || IsNil(o.Exec) {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasExec() bool {
	if o != nil && !IsNil(o.Exec) {
		return true
	}

	return false
}

// SetExec gets a reference to the given string and assigns it to the Exec field.
func (o *UpdateDatasetParams) SetExec(v string) {
	o.Exec = &v
}

// GetForceSize returns the ForceSize field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetForceSize() bool {
	if o == nil || IsNil(o.ForceSize) {
		var ret bool
		return ret
	}
	return *o.ForceSize
}

// GetForceSizeOk returns a tuple with the ForceSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetForceSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceSize) {
		return nil, false
	}
	return o.ForceSize, true
}

// HasForceSize returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasForceSize() bool {
	if o != nil && !IsNil(o.ForceSize) {
		return true
	}

	return false
}

// SetForceSize gets a reference to the given bool and assigns it to the ForceSize field.
func (o *UpdateDatasetParams) SetForceSize(v bool) {
	o.ForceSize = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetQuota() int64 {
	if o == nil || IsNil(o.Quota) {
		var ret int64
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetQuotaOk() (*int64, bool) {
	if o == nil || IsNil(o.Quota) {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasQuota() bool {
	if o != nil && !IsNil(o.Quota) {
		return true
	}

	return false
}

// SetQuota gets a reference to the given int64 and assigns it to the Quota field.
func (o *UpdateDatasetParams) SetQuota(v int64) {
	o.Quota = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetReadonly() string {
	if o == nil || IsNil(o.Readonly) {
		var ret string
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetReadonlyOk() (*string, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given string and assigns it to the Readonly field.
func (o *UpdateDatasetParams) SetReadonly(v string) {
	o.Readonly = &v
}

// GetRecordsize returns the Recordsize field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetRecordsize() string {
	if o == nil || IsNil(o.Recordsize) {
		var ret string
		return ret
	}
	return *o.Recordsize
}

// GetRecordsizeOk returns a tuple with the Recordsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetRecordsizeOk() (*string, bool) {
	if o == nil || IsNil(o.Recordsize) {
		return nil, false
	}
	return o.Recordsize, true
}

// HasRecordsize returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasRecordsize() bool {
	if o != nil && !IsNil(o.Recordsize) {
		return true
	}

	return false
}

// SetRecordsize gets a reference to the given string and assigns it to the Recordsize field.
func (o *UpdateDatasetParams) SetRecordsize(v string) {
	o.Recordsize = &v
}

// GetRefquota returns the Refquota field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetRefquota() int64 {
	if o == nil || IsNil(o.Refquota) {
		var ret int64
		return ret
	}
	return *o.Refquota
}

// GetRefquotaOk returns a tuple with the Refquota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetRefquotaOk() (*int64, bool) {
	if o == nil || IsNil(o.Refquota) {
		return nil, false
	}
	return o.Refquota, true
}

// HasRefquota returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasRefquota() bool {
	if o != nil && !IsNil(o.Refquota) {
		return true
	}

	return false
}

// SetRefquota gets a reference to the given int64 and assigns it to the Refquota field.
func (o *UpdateDatasetParams) SetRefquota(v int64) {
	o.Refquota = &v
}

// GetRefreservation returns the Refreservation field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetRefreservation() int64 {
	if o == nil || IsNil(o.Refreservation) {
		var ret int64
		return ret
	}
	return *o.Refreservation
}

// GetRefreservationOk returns a tuple with the Refreservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetRefreservationOk() (*int64, bool) {
	if o == nil || IsNil(o.Refreservation) {
		return nil, false
	}
	return o.Refreservation, true
}

// HasRefreservation returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasRefreservation() bool {
	if o != nil && !IsNil(o.Refreservation) {
		return true
	}

	return false
}

// SetRefreservation gets a reference to the given int64 and assigns it to the Refreservation field.
func (o *UpdateDatasetParams) SetRefreservation(v int64) {
	o.Refreservation = &v
}

// GetVolsize returns the Volsize field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetVolsize() int64 {
	if o == nil || IsNil(o.Volsize) {
		var ret int64
		return ret
	}
	return *o.Volsize
}

// GetVolsizeOk returns a tuple with the Volsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetVolsizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Volsize) {
		return nil, false
	}
	return o.Volsize, true
}

// HasVolsize returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasVolsize() bool {
	if o != nil && !IsNil(o.Volsize) {
		return true
	}

	return false
}

// SetVolsize gets a reference to the given int64 and assigns it to the Volsize field.
func (o *UpdateDatasetParams) SetVolsize(v int64) {
	o.Volsize = &v
}

// GetSnapdir returns the Snapdir field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetSnapdir() string {
	if o == nil || IsNil(o.Snapdir) {
		var ret string
		return ret
	}
	return *o.Snapdir
}

// GetSnapdirOk returns a tuple with the Snapdir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetSnapdirOk() (*string, bool) {
	if o == nil || IsNil(o.Snapdir) {
		return nil, false
	}
	return o.Snapdir, true
}

// HasSnapdir returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasSnapdir() bool {
	if o != nil && !IsNil(o.Snapdir) {
		return true
	}

	return false
}

// SetSnapdir gets a reference to the given string and assigns it to the Snapdir field.
func (o *UpdateDatasetParams) SetSnapdir(v string) {
	o.Snapdir = &v
}

// GetSync returns the Sync field value if set, zero value otherwise.
func (o *UpdateDatasetParams) GetSync() string {
	if o == nil || IsNil(o.Sync) {
		var ret string
		return ret
	}
	return *o.Sync
}

// GetSyncOk returns a tuple with the Sync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatasetParams) GetSyncOk() (*string, bool) {
	if o == nil || IsNil(o.Sync) {
		return nil, false
	}
	return o.Sync, true
}

// HasSync returns a boolean if a field has been set.
func (o *UpdateDatasetParams) HasSync() bool {
	if o != nil && !IsNil(o.Sync) {
		return true
	}

	return false
}

// SetSync gets a reference to the given string and assigns it to the Sync field.
func (o *UpdateDatasetParams) SetSync(v string) {
	o.Sync = &v
}

func (o UpdateDatasetParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDatasetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Atime) {
		toSerialize["atime"] = o.Atime
	}
	if !IsNil(o.Aclmode) {
		toSerialize["aclmode"] = o.Aclmode
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Copies) {
		toSerialize["copies"] = o.Copies
	}
	if !IsNil(o.Deduplication) {
		toSerialize["deduplication"] = o.Deduplication
	}
	if !IsNil(o.Exec) {
		toSerialize["exec"] = o.Exec
	}
	if !IsNil(o.ForceSize) {
		toSerialize["force_size"] = o.ForceSize
	}
	if !IsNil(o.Quota) {
		toSerialize["quota"] = o.Quota
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.Recordsize) {
		toSerialize["recordsize"] = o.Recordsize
	}
	if !IsNil(o.Refquota) {
		toSerialize["refquota"] = o.Refquota
	}
	if !IsNil(o.Refreservation) {
		toSerialize["refreservation"] = o.Refreservation
	}
	if !IsNil(o.Volsize) {
		toSerialize["volsize"] = o.Volsize
	}
	if !IsNil(o.Snapdir) {
		toSerialize["snapdir"] = o.Snapdir
	}
	if !IsNil(o.Sync) {
		toSerialize["sync"] = o.Sync
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateDatasetParams) UnmarshalJSON(bytes []byte) (err error) {
	varUpdateDatasetParams := _UpdateDatasetParams{}

	err = json.Unmarshal(bytes, &varUpdateDatasetParams)

	if err != nil {
		return err
	}

	*o = UpdateDatasetParams(varUpdateDatasetParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "atime")
		delete(additionalProperties, "aclmode")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "compression")
		delete(additionalProperties, "copies")
		delete(additionalProperties, "deduplication")
		delete(additionalProperties, "exec")
		delete(additionalProperties, "force_size")
		delete(additionalProperties, "quota")
		delete(additionalProperties, "readonly")
		delete(additionalProperties, "recordsize")
		delete(additionalProperties, "refquota")
		delete(additionalProperties, "refreservation")
		delete(additionalProperties, "volsize")
		delete(additionalProperties, "snapdir")
		delete(additionalProperties, "sync")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateDatasetParams struct {
	value *UpdateDatasetParams
	isSet bool
}

func (v NullableUpdateDatasetParams) Get() *UpdateDatasetParams {
	return v.value
}

func (v *NullableUpdateDatasetParams) Set(val *UpdateDatasetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDatasetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDatasetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDatasetParams(val *UpdateDatasetParams) *NullableUpdateDatasetParams {
	return &NullableUpdateDatasetParams{value: val, isSet: true}
}

func (v NullableUpdateDatasetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDatasetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
