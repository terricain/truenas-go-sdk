/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateCronjobParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCronjobParams{}

// CreateCronjobParams struct for CreateCronjobParams
type CreateCronjobParams struct {
	User                 string           `json:"user"`
	Command              string           `json:"command"`
	Description          *string          `json:"description,omitempty"`
	Enabled              *bool            `json:"enabled,omitempty"`
	Stdout               *bool            `json:"stdout,omitempty"`
	Stderr               *bool            `json:"stderr,omitempty"`
	Schedule             *CronJobSchedule `json:"schedule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateCronjobParams CreateCronjobParams

// NewCreateCronjobParams instantiates a new CreateCronjobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCronjobParams(user string, command string) *CreateCronjobParams {
	this := CreateCronjobParams{}
	this.User = user
	this.Command = command
	return &this
}

// NewCreateCronjobParamsWithDefaults instantiates a new CreateCronjobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCronjobParamsWithDefaults() *CreateCronjobParams {
	this := CreateCronjobParams{}
	return &this
}

// GetUser returns the User field value
func (o *CreateCronjobParams) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *CreateCronjobParams) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *CreateCronjobParams) SetUser(v string) {
	o.User = v
}

// GetCommand returns the Command field value
func (o *CreateCronjobParams) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *CreateCronjobParams) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *CreateCronjobParams) SetCommand(v string) {
	o.Command = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateCronjobParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCronjobParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateCronjobParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateCronjobParams) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CreateCronjobParams) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCronjobParams) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CreateCronjobParams) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CreateCronjobParams) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStdout returns the Stdout field value if set, zero value otherwise.
func (o *CreateCronjobParams) GetStdout() bool {
	if o == nil || IsNil(o.Stdout) {
		var ret bool
		return ret
	}
	return *o.Stdout
}

// GetStdoutOk returns a tuple with the Stdout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCronjobParams) GetStdoutOk() (*bool, bool) {
	if o == nil || IsNil(o.Stdout) {
		return nil, false
	}
	return o.Stdout, true
}

// HasStdout returns a boolean if a field has been set.
func (o *CreateCronjobParams) HasStdout() bool {
	if o != nil && !IsNil(o.Stdout) {
		return true
	}

	return false
}

// SetStdout gets a reference to the given bool and assigns it to the Stdout field.
func (o *CreateCronjobParams) SetStdout(v bool) {
	o.Stdout = &v
}

// GetStderr returns the Stderr field value if set, zero value otherwise.
func (o *CreateCronjobParams) GetStderr() bool {
	if o == nil || IsNil(o.Stderr) {
		var ret bool
		return ret
	}
	return *o.Stderr
}

// GetStderrOk returns a tuple with the Stderr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCronjobParams) GetStderrOk() (*bool, bool) {
	if o == nil || IsNil(o.Stderr) {
		return nil, false
	}
	return o.Stderr, true
}

// HasStderr returns a boolean if a field has been set.
func (o *CreateCronjobParams) HasStderr() bool {
	if o != nil && !IsNil(o.Stderr) {
		return true
	}

	return false
}

// SetStderr gets a reference to the given bool and assigns it to the Stderr field.
func (o *CreateCronjobParams) SetStderr(v bool) {
	o.Stderr = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *CreateCronjobParams) GetSchedule() CronJobSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret CronJobSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCronjobParams) GetScheduleOk() (*CronJobSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *CreateCronjobParams) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given CronJobSchedule and assigns it to the Schedule field.
func (o *CreateCronjobParams) SetSchedule(v CronJobSchedule) {
	o.Schedule = &v
}

func (o CreateCronjobParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCronjobParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["command"] = o.Command
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Stdout) {
		toSerialize["stdout"] = o.Stdout
	}
	if !IsNil(o.Stderr) {
		toSerialize["stderr"] = o.Stderr
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateCronjobParams) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"command",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCronjobParams := _CreateCronjobParams{}

	err = json.Unmarshal(bytes, &varCreateCronjobParams)

	if err != nil {
		return err
	}

	*o = CreateCronjobParams(varCreateCronjobParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "user")
		delete(additionalProperties, "command")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "stdout")
		delete(additionalProperties, "stderr")
		delete(additionalProperties, "schedule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateCronjobParams struct {
	value *CreateCronjobParams
	isSet bool
}

func (v NullableCreateCronjobParams) Get() *CreateCronjobParams {
	return v.value
}

func (v *NullableCreateCronjobParams) Set(val *CreateCronjobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCronjobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCronjobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCronjobParams(val *CreateCronjobParams) *NullableCreateCronjobParams {
	return &NullableCreateCronjobParams{value: val, isSet: true}
}

func (v NullableCreateCronjobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCronjobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
