/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// IscsiTargetextentApiService IscsiTargetextentApi service
type IscsiTargetextentApiService service

type ApiCreateISCSITargetExtentRequest struct {
	ctx context.Context
	ApiService *IscsiTargetextentApiService
	createISCSITargetExtentParams *CreateISCSITargetExtentParams
}

func (r ApiCreateISCSITargetExtentRequest) CreateISCSITargetExtentParams(createISCSITargetExtentParams CreateISCSITargetExtentParams) ApiCreateISCSITargetExtentRequest {
	r.createISCSITargetExtentParams = &createISCSITargetExtentParams
	return r
}

func (r ApiCreateISCSITargetExtentRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateISCSITargetExtentExecute(r)
}

/*
CreateISCSITargetExtent Method for CreateISCSITargetExtent

Create an Associated Target.

`lunid` will be automatically assigned if it is not provided based on the `target`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateISCSITargetExtentRequest
*/
func (a *IscsiTargetextentApiService) CreateISCSITargetExtent(ctx context.Context) ApiCreateISCSITargetExtentRequest {
	return ApiCreateISCSITargetExtentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IscsiTargetextentApiService) CreateISCSITargetExtentExecute(r ApiCreateISCSITargetExtentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiTargetextentApiService.CreateISCSITargetExtent")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/targetextent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createISCSITargetExtentParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteISCSITargetExtentRequest struct {
	ctx context.Context
	ApiService *IscsiTargetextentApiService
	id int32
	body *bool
}

func (r ApiDeleteISCSITargetExtentRequest) Body(body bool) ApiDeleteISCSITargetExtentRequest {
	r.body = &body
	return r
}

func (r ApiDeleteISCSITargetExtentRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteISCSITargetExtentExecute(r)
}

/*
DeleteISCSITargetExtent Method for DeleteISCSITargetExtent

Delete Associated Target of `id`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiDeleteISCSITargetExtentRequest
*/
func (a *IscsiTargetextentApiService) DeleteISCSITargetExtent(ctx context.Context, id int32) ApiDeleteISCSITargetExtentRequest {
	return ApiDeleteISCSITargetExtentRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *IscsiTargetextentApiService) DeleteISCSITargetExtentExecute(r ApiDeleteISCSITargetExtentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiTargetextentApiService.DeleteISCSITargetExtent")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/targetextent/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetISCSITargetExtentRequest struct {
	ctx context.Context
	ApiService *IscsiTargetextentApiService
	id int32
	limit *int32
	offset *int32
	count *bool
	sort *string
}

func (r ApiGetISCSITargetExtentRequest) Limit(limit int32) ApiGetISCSITargetExtentRequest {
	r.limit = &limit
	return r
}

func (r ApiGetISCSITargetExtentRequest) Offset(offset int32) ApiGetISCSITargetExtentRequest {
	r.offset = &offset
	return r
}

func (r ApiGetISCSITargetExtentRequest) Count(count bool) ApiGetISCSITargetExtentRequest {
	r.count = &count
	return r
}

func (r ApiGetISCSITargetExtentRequest) Sort(sort string) ApiGetISCSITargetExtentRequest {
	r.sort = &sort
	return r
}

func (r ApiGetISCSITargetExtentRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetISCSITargetExtentExecute(r)
}

/*
GetISCSITargetExtent Method for GetISCSITargetExtent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetISCSITargetExtentRequest
*/
func (a *IscsiTargetextentApiService) GetISCSITargetExtent(ctx context.Context, id int32) ApiGetISCSITargetExtentRequest {
	return ApiGetISCSITargetExtentRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *IscsiTargetextentApiService) GetISCSITargetExtentExecute(r ApiGetISCSITargetExtentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiTargetextentApiService.GetISCSITargetExtent")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/targetextent/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetISCSITargetExtentsRequest struct {
	ctx context.Context
	ApiService *IscsiTargetextentApiService
	limit *int32
	offset *int32
	count *bool
	sort *string
}

func (r ApiGetISCSITargetExtentsRequest) Limit(limit int32) ApiGetISCSITargetExtentsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetISCSITargetExtentsRequest) Offset(offset int32) ApiGetISCSITargetExtentsRequest {
	r.offset = &offset
	return r
}

func (r ApiGetISCSITargetExtentsRequest) Count(count bool) ApiGetISCSITargetExtentsRequest {
	r.count = &count
	return r
}

func (r ApiGetISCSITargetExtentsRequest) Sort(sort string) ApiGetISCSITargetExtentsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetISCSITargetExtentsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetISCSITargetExtentsExecute(r)
}

/*
GetISCSITargetExtents Method for GetISCSITargetExtents

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetISCSITargetExtentsRequest
*/
func (a *IscsiTargetextentApiService) GetISCSITargetExtents(ctx context.Context) ApiGetISCSITargetExtentsRequest {
	return ApiGetISCSITargetExtentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IscsiTargetextentApiService) GetISCSITargetExtentsExecute(r ApiGetISCSITargetExtentsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiTargetextentApiService.GetISCSITargetExtents")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/targetextent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
