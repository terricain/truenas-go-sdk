/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// CreateGroupParams struct for CreateGroupParams
type CreateGroupParams struct {
	Gid *int32 `json:"gid,omitempty"`
	Name string `json:"name"`
	Smb *bool `json:"smb,omitempty"`
	Sudo *bool `json:"sudo,omitempty"`
	SudoNopasswd *bool `json:"sudo_nopasswd,omitempty"`
	SudoCommands []string `json:"sudo_commands,omitempty"`
	AllowDuplicateGid *bool `json:"allow_duplicate_gid,omitempty"`
	Users []int32 `json:"users,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateGroupParams CreateGroupParams

// NewCreateGroupParams instantiates a new CreateGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGroupParams(name string) *CreateGroupParams {
	this := CreateGroupParams{}
	this.Name = name
	return &this
}

// NewCreateGroupParamsWithDefaults instantiates a new CreateGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGroupParamsWithDefaults() *CreateGroupParams {
	this := CreateGroupParams{}
	return &this
}

// GetGid returns the Gid field value if set, zero value otherwise.
func (o *CreateGroupParams) GetGid() int32 {
	if o == nil || o.Gid == nil {
		var ret int32
		return ret
	}
	return *o.Gid
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetGidOk() (*int32, bool) {
	if o == nil || o.Gid == nil {
		return nil, false
	}
	return o.Gid, true
}

// HasGid returns a boolean if a field has been set.
func (o *CreateGroupParams) HasGid() bool {
	if o != nil && o.Gid != nil {
		return true
	}

	return false
}

// SetGid gets a reference to the given int32 and assigns it to the Gid field.
func (o *CreateGroupParams) SetGid(v int32) {
	o.Gid = &v
}

// GetName returns the Name field value
func (o *CreateGroupParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateGroupParams) SetName(v string) {
	o.Name = v
}

// GetSmb returns the Smb field value if set, zero value otherwise.
func (o *CreateGroupParams) GetSmb() bool {
	if o == nil || o.Smb == nil {
		var ret bool
		return ret
	}
	return *o.Smb
}

// GetSmbOk returns a tuple with the Smb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetSmbOk() (*bool, bool) {
	if o == nil || o.Smb == nil {
		return nil, false
	}
	return o.Smb, true
}

// HasSmb returns a boolean if a field has been set.
func (o *CreateGroupParams) HasSmb() bool {
	if o != nil && o.Smb != nil {
		return true
	}

	return false
}

// SetSmb gets a reference to the given bool and assigns it to the Smb field.
func (o *CreateGroupParams) SetSmb(v bool) {
	o.Smb = &v
}

// GetSudo returns the Sudo field value if set, zero value otherwise.
func (o *CreateGroupParams) GetSudo() bool {
	if o == nil || o.Sudo == nil {
		var ret bool
		return ret
	}
	return *o.Sudo
}

// GetSudoOk returns a tuple with the Sudo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetSudoOk() (*bool, bool) {
	if o == nil || o.Sudo == nil {
		return nil, false
	}
	return o.Sudo, true
}

// HasSudo returns a boolean if a field has been set.
func (o *CreateGroupParams) HasSudo() bool {
	if o != nil && o.Sudo != nil {
		return true
	}

	return false
}

// SetSudo gets a reference to the given bool and assigns it to the Sudo field.
func (o *CreateGroupParams) SetSudo(v bool) {
	o.Sudo = &v
}

// GetSudoNopasswd returns the SudoNopasswd field value if set, zero value otherwise.
func (o *CreateGroupParams) GetSudoNopasswd() bool {
	if o == nil || o.SudoNopasswd == nil {
		var ret bool
		return ret
	}
	return *o.SudoNopasswd
}

// GetSudoNopasswdOk returns a tuple with the SudoNopasswd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetSudoNopasswdOk() (*bool, bool) {
	if o == nil || o.SudoNopasswd == nil {
		return nil, false
	}
	return o.SudoNopasswd, true
}

// HasSudoNopasswd returns a boolean if a field has been set.
func (o *CreateGroupParams) HasSudoNopasswd() bool {
	if o != nil && o.SudoNopasswd != nil {
		return true
	}

	return false
}

// SetSudoNopasswd gets a reference to the given bool and assigns it to the SudoNopasswd field.
func (o *CreateGroupParams) SetSudoNopasswd(v bool) {
	o.SudoNopasswd = &v
}

// GetSudoCommands returns the SudoCommands field value if set, zero value otherwise.
func (o *CreateGroupParams) GetSudoCommands() []string {
	if o == nil || o.SudoCommands == nil {
		var ret []string
		return ret
	}
	return o.SudoCommands
}

// GetSudoCommandsOk returns a tuple with the SudoCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetSudoCommandsOk() ([]string, bool) {
	if o == nil || o.SudoCommands == nil {
		return nil, false
	}
	return o.SudoCommands, true
}

// HasSudoCommands returns a boolean if a field has been set.
func (o *CreateGroupParams) HasSudoCommands() bool {
	if o != nil && o.SudoCommands != nil {
		return true
	}

	return false
}

// SetSudoCommands gets a reference to the given []string and assigns it to the SudoCommands field.
func (o *CreateGroupParams) SetSudoCommands(v []string) {
	o.SudoCommands = v
}

// GetAllowDuplicateGid returns the AllowDuplicateGid field value if set, zero value otherwise.
func (o *CreateGroupParams) GetAllowDuplicateGid() bool {
	if o == nil || o.AllowDuplicateGid == nil {
		var ret bool
		return ret
	}
	return *o.AllowDuplicateGid
}

// GetAllowDuplicateGidOk returns a tuple with the AllowDuplicateGid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetAllowDuplicateGidOk() (*bool, bool) {
	if o == nil || o.AllowDuplicateGid == nil {
		return nil, false
	}
	return o.AllowDuplicateGid, true
}

// HasAllowDuplicateGid returns a boolean if a field has been set.
func (o *CreateGroupParams) HasAllowDuplicateGid() bool {
	if o != nil && o.AllowDuplicateGid != nil {
		return true
	}

	return false
}

// SetAllowDuplicateGid gets a reference to the given bool and assigns it to the AllowDuplicateGid field.
func (o *CreateGroupParams) SetAllowDuplicateGid(v bool) {
	o.AllowDuplicateGid = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *CreateGroupParams) GetUsers() []int32 {
	if o == nil || o.Users == nil {
		var ret []int32
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetUsersOk() ([]int32, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *CreateGroupParams) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []int32 and assigns it to the Users field.
func (o *CreateGroupParams) SetUsers(v []int32) {
	o.Users = v
}

func (o CreateGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Gid != nil {
		toSerialize["gid"] = o.Gid
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Smb != nil {
		toSerialize["smb"] = o.Smb
	}
	if o.Sudo != nil {
		toSerialize["sudo"] = o.Sudo
	}
	if o.SudoNopasswd != nil {
		toSerialize["sudo_nopasswd"] = o.SudoNopasswd
	}
	if o.SudoCommands != nil {
		toSerialize["sudo_commands"] = o.SudoCommands
	}
	if o.AllowDuplicateGid != nil {
		toSerialize["allow_duplicate_gid"] = o.AllowDuplicateGid
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateGroupParams) UnmarshalJSON(bytes []byte) (err error) {
	varCreateGroupParams := _CreateGroupParams{}

	if err = json.Unmarshal(bytes, &varCreateGroupParams); err == nil {
		*o = CreateGroupParams(varCreateGroupParams)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "gid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "smb")
		delete(additionalProperties, "sudo")
		delete(additionalProperties, "sudo_nopasswd")
		delete(additionalProperties, "sudo_commands")
		delete(additionalProperties, "allow_duplicate_gid")
		delete(additionalProperties, "users")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateGroupParams struct {
	value *CreateGroupParams
	isSet bool
}

func (v NullableCreateGroupParams) Get() *CreateGroupParams {
	return v.value
}

func (v *NullableCreateGroupParams) Set(val *CreateGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGroupParams(val *CreateGroupParams) *NullableCreateGroupParams {
	return &NullableCreateGroupParams{value: val, isSet: true}
}

func (v NullableCreateGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


