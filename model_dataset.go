/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Dataset struct for Dataset
type Dataset struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Pool string `json:"pool"`
	Type string `json:"type"`
	Mountpoint *string `json:"mountpoint,omitempty"`
	Encrypted *bool `json:"encrypted,omitempty"`
	EncryptionRoot *string `json:"encryption_root,omitempty"`
	KeyLoaded *bool `json:"key_loaded,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	EncryptionAlgorithm *CompositeValue `json:"encryption_algorithm,omitempty"`
	Aclmode *CompositeValue `json:"aclmode,omitempty"`
	Acltype *CompositeValue `json:"acltype,omitempty"`
	Atime *CompositeValue `json:"atime,omitempty"`
	Available *CompositeValue `json:"available,omitempty"`
	Casesensitivity *CompositeValue `json:"casesensitivity,omitempty"`
	Comments *CompositeValue `json:"comments,omitempty"`
	Compression *CompositeValue `json:"compression,omitempty"`
	Deduplication *CompositeValue `json:"deduplication,omitempty"`
	Exec *CompositeValue `json:"exec,omitempty"`
	KeyFormat *CompositeValue `json:"key_format,omitempty"`
	Managedby *CompositeValue `json:"managedby,omitempty"`
	Copies *CompositeValue `json:"copies,omitempty"`
	Quota *CompositeValue `json:"quota,omitempty"`
	QuotaCritical *CompositeValue `json:"quota_critical,omitempty"`
	QuotaWarning *CompositeValue `json:"quota_warning,omitempty"`
	Reservation *CompositeValue `json:"reservation,omitempty"`
	Refreservation *CompositeValue `json:"refreservation,omitempty"`
	Refquota *CompositeValue `json:"refquota,omitempty"`
	RefquotaCritical *CompositeValue `json:"refquota_critical,omitempty"`
	RefquotaWarning *CompositeValue `json:"refquota_warning,omitempty"`
	Readonly *CompositeValue `json:"readonly,omitempty"`
	Recordsize *CompositeValue `json:"recordsize,omitempty"`
	Sync *CompositeValue `json:"sync,omitempty"`
	Snapdir *CompositeValue `json:"snapdir,omitempty"`
	Used *CompositeValue `json:"used,omitempty"`
	Pbkdf2iters *CompositeValue `json:"pbkdf2iters,omitempty"`
	Origin *CompositeValue `json:"origin,omitempty"`
	Xattr *CompositeValue `json:"xattr,omitempty"`
	Volsize *CompositeValue `json:"volsize,omitempty"`
	Volblocksize *CompositeValue `json:"volblocksize,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Dataset Dataset

// NewDataset instantiates a new Dataset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataset(id string, name string, pool string, type_ string) *Dataset {
	this := Dataset{}
	this.Id = id
	this.Name = name
	this.Pool = pool
	this.Type = type_
	return &this
}

// NewDatasetWithDefaults instantiates a new Dataset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetWithDefaults() *Dataset {
	this := Dataset{}
	return &this
}

// GetId returns the Id field value
func (o *Dataset) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Dataset) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Dataset) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Dataset) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Dataset) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Dataset) SetName(v string) {
	o.Name = v
}

// GetPool returns the Pool field value
func (o *Dataset) GetPool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pool
}

// GetPoolOk returns a tuple with the Pool field value
// and a boolean to check if the value has been set.
func (o *Dataset) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pool, true
}

// SetPool sets field value
func (o *Dataset) SetPool(v string) {
	o.Pool = v
}

// GetType returns the Type field value
func (o *Dataset) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Dataset) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Dataset) SetType(v string) {
	o.Type = v
}

// GetMountpoint returns the Mountpoint field value if set, zero value otherwise.
func (o *Dataset) GetMountpoint() string {
	if o == nil || o.Mountpoint == nil {
		var ret string
		return ret
	}
	return *o.Mountpoint
}

// GetMountpointOk returns a tuple with the Mountpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetMountpointOk() (*string, bool) {
	if o == nil || o.Mountpoint == nil {
		return nil, false
	}
	return o.Mountpoint, true
}

// HasMountpoint returns a boolean if a field has been set.
func (o *Dataset) HasMountpoint() bool {
	if o != nil && o.Mountpoint != nil {
		return true
	}

	return false
}

// SetMountpoint gets a reference to the given string and assigns it to the Mountpoint field.
func (o *Dataset) SetMountpoint(v string) {
	o.Mountpoint = &v
}

// GetEncrypted returns the Encrypted field value if set, zero value otherwise.
func (o *Dataset) GetEncrypted() bool {
	if o == nil || o.Encrypted == nil {
		var ret bool
		return ret
	}
	return *o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetEncryptedOk() (*bool, bool) {
	if o == nil || o.Encrypted == nil {
		return nil, false
	}
	return o.Encrypted, true
}

// HasEncrypted returns a boolean if a field has been set.
func (o *Dataset) HasEncrypted() bool {
	if o != nil && o.Encrypted != nil {
		return true
	}

	return false
}

// SetEncrypted gets a reference to the given bool and assigns it to the Encrypted field.
func (o *Dataset) SetEncrypted(v bool) {
	o.Encrypted = &v
}

// GetEncryptionRoot returns the EncryptionRoot field value if set, zero value otherwise.
func (o *Dataset) GetEncryptionRoot() string {
	if o == nil || o.EncryptionRoot == nil {
		var ret string
		return ret
	}
	return *o.EncryptionRoot
}

// GetEncryptionRootOk returns a tuple with the EncryptionRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetEncryptionRootOk() (*string, bool) {
	if o == nil || o.EncryptionRoot == nil {
		return nil, false
	}
	return o.EncryptionRoot, true
}

// HasEncryptionRoot returns a boolean if a field has been set.
func (o *Dataset) HasEncryptionRoot() bool {
	if o != nil && o.EncryptionRoot != nil {
		return true
	}

	return false
}

// SetEncryptionRoot gets a reference to the given string and assigns it to the EncryptionRoot field.
func (o *Dataset) SetEncryptionRoot(v string) {
	o.EncryptionRoot = &v
}

// GetKeyLoaded returns the KeyLoaded field value if set, zero value otherwise.
func (o *Dataset) GetKeyLoaded() bool {
	if o == nil || o.KeyLoaded == nil {
		var ret bool
		return ret
	}
	return *o.KeyLoaded
}

// GetKeyLoadedOk returns a tuple with the KeyLoaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetKeyLoadedOk() (*bool, bool) {
	if o == nil || o.KeyLoaded == nil {
		return nil, false
	}
	return o.KeyLoaded, true
}

// HasKeyLoaded returns a boolean if a field has been set.
func (o *Dataset) HasKeyLoaded() bool {
	if o != nil && o.KeyLoaded != nil {
		return true
	}

	return false
}

// SetKeyLoaded gets a reference to the given bool and assigns it to the KeyLoaded field.
func (o *Dataset) SetKeyLoaded(v bool) {
	o.KeyLoaded = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *Dataset) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *Dataset) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *Dataset) SetLocked(v bool) {
	o.Locked = &v
}

// GetEncryptionAlgorithm returns the EncryptionAlgorithm field value if set, zero value otherwise.
func (o *Dataset) GetEncryptionAlgorithm() CompositeValue {
	if o == nil || o.EncryptionAlgorithm == nil {
		var ret CompositeValue
		return ret
	}
	return *o.EncryptionAlgorithm
}

// GetEncryptionAlgorithmOk returns a tuple with the EncryptionAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetEncryptionAlgorithmOk() (*CompositeValue, bool) {
	if o == nil || o.EncryptionAlgorithm == nil {
		return nil, false
	}
	return o.EncryptionAlgorithm, true
}

// HasEncryptionAlgorithm returns a boolean if a field has been set.
func (o *Dataset) HasEncryptionAlgorithm() bool {
	if o != nil && o.EncryptionAlgorithm != nil {
		return true
	}

	return false
}

// SetEncryptionAlgorithm gets a reference to the given CompositeValue and assigns it to the EncryptionAlgorithm field.
func (o *Dataset) SetEncryptionAlgorithm(v CompositeValue) {
	o.EncryptionAlgorithm = &v
}

// GetAclmode returns the Aclmode field value if set, zero value otherwise.
func (o *Dataset) GetAclmode() CompositeValue {
	if o == nil || o.Aclmode == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Aclmode
}

// GetAclmodeOk returns a tuple with the Aclmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetAclmodeOk() (*CompositeValue, bool) {
	if o == nil || o.Aclmode == nil {
		return nil, false
	}
	return o.Aclmode, true
}

// HasAclmode returns a boolean if a field has been set.
func (o *Dataset) HasAclmode() bool {
	if o != nil && o.Aclmode != nil {
		return true
	}

	return false
}

// SetAclmode gets a reference to the given CompositeValue and assigns it to the Aclmode field.
func (o *Dataset) SetAclmode(v CompositeValue) {
	o.Aclmode = &v
}

// GetAcltype returns the Acltype field value if set, zero value otherwise.
func (o *Dataset) GetAcltype() CompositeValue {
	if o == nil || o.Acltype == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Acltype
}

// GetAcltypeOk returns a tuple with the Acltype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetAcltypeOk() (*CompositeValue, bool) {
	if o == nil || o.Acltype == nil {
		return nil, false
	}
	return o.Acltype, true
}

// HasAcltype returns a boolean if a field has been set.
func (o *Dataset) HasAcltype() bool {
	if o != nil && o.Acltype != nil {
		return true
	}

	return false
}

// SetAcltype gets a reference to the given CompositeValue and assigns it to the Acltype field.
func (o *Dataset) SetAcltype(v CompositeValue) {
	o.Acltype = &v
}

// GetAtime returns the Atime field value if set, zero value otherwise.
func (o *Dataset) GetAtime() CompositeValue {
	if o == nil || o.Atime == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Atime
}

// GetAtimeOk returns a tuple with the Atime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetAtimeOk() (*CompositeValue, bool) {
	if o == nil || o.Atime == nil {
		return nil, false
	}
	return o.Atime, true
}

// HasAtime returns a boolean if a field has been set.
func (o *Dataset) HasAtime() bool {
	if o != nil && o.Atime != nil {
		return true
	}

	return false
}

// SetAtime gets a reference to the given CompositeValue and assigns it to the Atime field.
func (o *Dataset) SetAtime(v CompositeValue) {
	o.Atime = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *Dataset) GetAvailable() CompositeValue {
	if o == nil || o.Available == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetAvailableOk() (*CompositeValue, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *Dataset) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given CompositeValue and assigns it to the Available field.
func (o *Dataset) SetAvailable(v CompositeValue) {
	o.Available = &v
}

// GetCasesensitivity returns the Casesensitivity field value if set, zero value otherwise.
func (o *Dataset) GetCasesensitivity() CompositeValue {
	if o == nil || o.Casesensitivity == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Casesensitivity
}

// GetCasesensitivityOk returns a tuple with the Casesensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetCasesensitivityOk() (*CompositeValue, bool) {
	if o == nil || o.Casesensitivity == nil {
		return nil, false
	}
	return o.Casesensitivity, true
}

// HasCasesensitivity returns a boolean if a field has been set.
func (o *Dataset) HasCasesensitivity() bool {
	if o != nil && o.Casesensitivity != nil {
		return true
	}

	return false
}

// SetCasesensitivity gets a reference to the given CompositeValue and assigns it to the Casesensitivity field.
func (o *Dataset) SetCasesensitivity(v CompositeValue) {
	o.Casesensitivity = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Dataset) GetComments() CompositeValue {
	if o == nil || o.Comments == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetCommentsOk() (*CompositeValue, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Dataset) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given CompositeValue and assigns it to the Comments field.
func (o *Dataset) SetComments(v CompositeValue) {
	o.Comments = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *Dataset) GetCompression() CompositeValue {
	if o == nil || o.Compression == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetCompressionOk() (*CompositeValue, bool) {
	if o == nil || o.Compression == nil {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *Dataset) HasCompression() bool {
	if o != nil && o.Compression != nil {
		return true
	}

	return false
}

// SetCompression gets a reference to the given CompositeValue and assigns it to the Compression field.
func (o *Dataset) SetCompression(v CompositeValue) {
	o.Compression = &v
}

// GetDeduplication returns the Deduplication field value if set, zero value otherwise.
func (o *Dataset) GetDeduplication() CompositeValue {
	if o == nil || o.Deduplication == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Deduplication
}

// GetDeduplicationOk returns a tuple with the Deduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetDeduplicationOk() (*CompositeValue, bool) {
	if o == nil || o.Deduplication == nil {
		return nil, false
	}
	return o.Deduplication, true
}

// HasDeduplication returns a boolean if a field has been set.
func (o *Dataset) HasDeduplication() bool {
	if o != nil && o.Deduplication != nil {
		return true
	}

	return false
}

// SetDeduplication gets a reference to the given CompositeValue and assigns it to the Deduplication field.
func (o *Dataset) SetDeduplication(v CompositeValue) {
	o.Deduplication = &v
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *Dataset) GetExec() CompositeValue {
	if o == nil || o.Exec == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetExecOk() (*CompositeValue, bool) {
	if o == nil || o.Exec == nil {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *Dataset) HasExec() bool {
	if o != nil && o.Exec != nil {
		return true
	}

	return false
}

// SetExec gets a reference to the given CompositeValue and assigns it to the Exec field.
func (o *Dataset) SetExec(v CompositeValue) {
	o.Exec = &v
}

// GetKeyFormat returns the KeyFormat field value if set, zero value otherwise.
func (o *Dataset) GetKeyFormat() CompositeValue {
	if o == nil || o.KeyFormat == nil {
		var ret CompositeValue
		return ret
	}
	return *o.KeyFormat
}

// GetKeyFormatOk returns a tuple with the KeyFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetKeyFormatOk() (*CompositeValue, bool) {
	if o == nil || o.KeyFormat == nil {
		return nil, false
	}
	return o.KeyFormat, true
}

// HasKeyFormat returns a boolean if a field has been set.
func (o *Dataset) HasKeyFormat() bool {
	if o != nil && o.KeyFormat != nil {
		return true
	}

	return false
}

// SetKeyFormat gets a reference to the given CompositeValue and assigns it to the KeyFormat field.
func (o *Dataset) SetKeyFormat(v CompositeValue) {
	o.KeyFormat = &v
}

// GetManagedby returns the Managedby field value if set, zero value otherwise.
func (o *Dataset) GetManagedby() CompositeValue {
	if o == nil || o.Managedby == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Managedby
}

// GetManagedbyOk returns a tuple with the Managedby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetManagedbyOk() (*CompositeValue, bool) {
	if o == nil || o.Managedby == nil {
		return nil, false
	}
	return o.Managedby, true
}

// HasManagedby returns a boolean if a field has been set.
func (o *Dataset) HasManagedby() bool {
	if o != nil && o.Managedby != nil {
		return true
	}

	return false
}

// SetManagedby gets a reference to the given CompositeValue and assigns it to the Managedby field.
func (o *Dataset) SetManagedby(v CompositeValue) {
	o.Managedby = &v
}

// GetCopies returns the Copies field value if set, zero value otherwise.
func (o *Dataset) GetCopies() CompositeValue {
	if o == nil || o.Copies == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Copies
}

// GetCopiesOk returns a tuple with the Copies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetCopiesOk() (*CompositeValue, bool) {
	if o == nil || o.Copies == nil {
		return nil, false
	}
	return o.Copies, true
}

// HasCopies returns a boolean if a field has been set.
func (o *Dataset) HasCopies() bool {
	if o != nil && o.Copies != nil {
		return true
	}

	return false
}

// SetCopies gets a reference to the given CompositeValue and assigns it to the Copies field.
func (o *Dataset) SetCopies(v CompositeValue) {
	o.Copies = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *Dataset) GetQuota() CompositeValue {
	if o == nil || o.Quota == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetQuotaOk() (*CompositeValue, bool) {
	if o == nil || o.Quota == nil {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *Dataset) HasQuota() bool {
	if o != nil && o.Quota != nil {
		return true
	}

	return false
}

// SetQuota gets a reference to the given CompositeValue and assigns it to the Quota field.
func (o *Dataset) SetQuota(v CompositeValue) {
	o.Quota = &v
}

// GetQuotaCritical returns the QuotaCritical field value if set, zero value otherwise.
func (o *Dataset) GetQuotaCritical() CompositeValue {
	if o == nil || o.QuotaCritical == nil {
		var ret CompositeValue
		return ret
	}
	return *o.QuotaCritical
}

// GetQuotaCriticalOk returns a tuple with the QuotaCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetQuotaCriticalOk() (*CompositeValue, bool) {
	if o == nil || o.QuotaCritical == nil {
		return nil, false
	}
	return o.QuotaCritical, true
}

// HasQuotaCritical returns a boolean if a field has been set.
func (o *Dataset) HasQuotaCritical() bool {
	if o != nil && o.QuotaCritical != nil {
		return true
	}

	return false
}

// SetQuotaCritical gets a reference to the given CompositeValue and assigns it to the QuotaCritical field.
func (o *Dataset) SetQuotaCritical(v CompositeValue) {
	o.QuotaCritical = &v
}

// GetQuotaWarning returns the QuotaWarning field value if set, zero value otherwise.
func (o *Dataset) GetQuotaWarning() CompositeValue {
	if o == nil || o.QuotaWarning == nil {
		var ret CompositeValue
		return ret
	}
	return *o.QuotaWarning
}

// GetQuotaWarningOk returns a tuple with the QuotaWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetQuotaWarningOk() (*CompositeValue, bool) {
	if o == nil || o.QuotaWarning == nil {
		return nil, false
	}
	return o.QuotaWarning, true
}

// HasQuotaWarning returns a boolean if a field has been set.
func (o *Dataset) HasQuotaWarning() bool {
	if o != nil && o.QuotaWarning != nil {
		return true
	}

	return false
}

// SetQuotaWarning gets a reference to the given CompositeValue and assigns it to the QuotaWarning field.
func (o *Dataset) SetQuotaWarning(v CompositeValue) {
	o.QuotaWarning = &v
}

// GetReservation returns the Reservation field value if set, zero value otherwise.
func (o *Dataset) GetReservation() CompositeValue {
	if o == nil || o.Reservation == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Reservation
}

// GetReservationOk returns a tuple with the Reservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetReservationOk() (*CompositeValue, bool) {
	if o == nil || o.Reservation == nil {
		return nil, false
	}
	return o.Reservation, true
}

// HasReservation returns a boolean if a field has been set.
func (o *Dataset) HasReservation() bool {
	if o != nil && o.Reservation != nil {
		return true
	}

	return false
}

// SetReservation gets a reference to the given CompositeValue and assigns it to the Reservation field.
func (o *Dataset) SetReservation(v CompositeValue) {
	o.Reservation = &v
}

// GetRefreservation returns the Refreservation field value if set, zero value otherwise.
func (o *Dataset) GetRefreservation() CompositeValue {
	if o == nil || o.Refreservation == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Refreservation
}

// GetRefreservationOk returns a tuple with the Refreservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetRefreservationOk() (*CompositeValue, bool) {
	if o == nil || o.Refreservation == nil {
		return nil, false
	}
	return o.Refreservation, true
}

// HasRefreservation returns a boolean if a field has been set.
func (o *Dataset) HasRefreservation() bool {
	if o != nil && o.Refreservation != nil {
		return true
	}

	return false
}

// SetRefreservation gets a reference to the given CompositeValue and assigns it to the Refreservation field.
func (o *Dataset) SetRefreservation(v CompositeValue) {
	o.Refreservation = &v
}

// GetRefquota returns the Refquota field value if set, zero value otherwise.
func (o *Dataset) GetRefquota() CompositeValue {
	if o == nil || o.Refquota == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Refquota
}

// GetRefquotaOk returns a tuple with the Refquota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetRefquotaOk() (*CompositeValue, bool) {
	if o == nil || o.Refquota == nil {
		return nil, false
	}
	return o.Refquota, true
}

// HasRefquota returns a boolean if a field has been set.
func (o *Dataset) HasRefquota() bool {
	if o != nil && o.Refquota != nil {
		return true
	}

	return false
}

// SetRefquota gets a reference to the given CompositeValue and assigns it to the Refquota field.
func (o *Dataset) SetRefquota(v CompositeValue) {
	o.Refquota = &v
}

// GetRefquotaCritical returns the RefquotaCritical field value if set, zero value otherwise.
func (o *Dataset) GetRefquotaCritical() CompositeValue {
	if o == nil || o.RefquotaCritical == nil {
		var ret CompositeValue
		return ret
	}
	return *o.RefquotaCritical
}

// GetRefquotaCriticalOk returns a tuple with the RefquotaCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetRefquotaCriticalOk() (*CompositeValue, bool) {
	if o == nil || o.RefquotaCritical == nil {
		return nil, false
	}
	return o.RefquotaCritical, true
}

// HasRefquotaCritical returns a boolean if a field has been set.
func (o *Dataset) HasRefquotaCritical() bool {
	if o != nil && o.RefquotaCritical != nil {
		return true
	}

	return false
}

// SetRefquotaCritical gets a reference to the given CompositeValue and assigns it to the RefquotaCritical field.
func (o *Dataset) SetRefquotaCritical(v CompositeValue) {
	o.RefquotaCritical = &v
}

// GetRefquotaWarning returns the RefquotaWarning field value if set, zero value otherwise.
func (o *Dataset) GetRefquotaWarning() CompositeValue {
	if o == nil || o.RefquotaWarning == nil {
		var ret CompositeValue
		return ret
	}
	return *o.RefquotaWarning
}

// GetRefquotaWarningOk returns a tuple with the RefquotaWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetRefquotaWarningOk() (*CompositeValue, bool) {
	if o == nil || o.RefquotaWarning == nil {
		return nil, false
	}
	return o.RefquotaWarning, true
}

// HasRefquotaWarning returns a boolean if a field has been set.
func (o *Dataset) HasRefquotaWarning() bool {
	if o != nil && o.RefquotaWarning != nil {
		return true
	}

	return false
}

// SetRefquotaWarning gets a reference to the given CompositeValue and assigns it to the RefquotaWarning field.
func (o *Dataset) SetRefquotaWarning(v CompositeValue) {
	o.RefquotaWarning = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *Dataset) GetReadonly() CompositeValue {
	if o == nil || o.Readonly == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetReadonlyOk() (*CompositeValue, bool) {
	if o == nil || o.Readonly == nil {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *Dataset) HasReadonly() bool {
	if o != nil && o.Readonly != nil {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given CompositeValue and assigns it to the Readonly field.
func (o *Dataset) SetReadonly(v CompositeValue) {
	o.Readonly = &v
}

// GetRecordsize returns the Recordsize field value if set, zero value otherwise.
func (o *Dataset) GetRecordsize() CompositeValue {
	if o == nil || o.Recordsize == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Recordsize
}

// GetRecordsizeOk returns a tuple with the Recordsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetRecordsizeOk() (*CompositeValue, bool) {
	if o == nil || o.Recordsize == nil {
		return nil, false
	}
	return o.Recordsize, true
}

// HasRecordsize returns a boolean if a field has been set.
func (o *Dataset) HasRecordsize() bool {
	if o != nil && o.Recordsize != nil {
		return true
	}

	return false
}

// SetRecordsize gets a reference to the given CompositeValue and assigns it to the Recordsize field.
func (o *Dataset) SetRecordsize(v CompositeValue) {
	o.Recordsize = &v
}

// GetSync returns the Sync field value if set, zero value otherwise.
func (o *Dataset) GetSync() CompositeValue {
	if o == nil || o.Sync == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Sync
}

// GetSyncOk returns a tuple with the Sync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetSyncOk() (*CompositeValue, bool) {
	if o == nil || o.Sync == nil {
		return nil, false
	}
	return o.Sync, true
}

// HasSync returns a boolean if a field has been set.
func (o *Dataset) HasSync() bool {
	if o != nil && o.Sync != nil {
		return true
	}

	return false
}

// SetSync gets a reference to the given CompositeValue and assigns it to the Sync field.
func (o *Dataset) SetSync(v CompositeValue) {
	o.Sync = &v
}

// GetSnapdir returns the Snapdir field value if set, zero value otherwise.
func (o *Dataset) GetSnapdir() CompositeValue {
	if o == nil || o.Snapdir == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Snapdir
}

// GetSnapdirOk returns a tuple with the Snapdir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetSnapdirOk() (*CompositeValue, bool) {
	if o == nil || o.Snapdir == nil {
		return nil, false
	}
	return o.Snapdir, true
}

// HasSnapdir returns a boolean if a field has been set.
func (o *Dataset) HasSnapdir() bool {
	if o != nil && o.Snapdir != nil {
		return true
	}

	return false
}

// SetSnapdir gets a reference to the given CompositeValue and assigns it to the Snapdir field.
func (o *Dataset) SetSnapdir(v CompositeValue) {
	o.Snapdir = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *Dataset) GetUsed() CompositeValue {
	if o == nil || o.Used == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetUsedOk() (*CompositeValue, bool) {
	if o == nil || o.Used == nil {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *Dataset) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given CompositeValue and assigns it to the Used field.
func (o *Dataset) SetUsed(v CompositeValue) {
	o.Used = &v
}

// GetPbkdf2iters returns the Pbkdf2iters field value if set, zero value otherwise.
func (o *Dataset) GetPbkdf2iters() CompositeValue {
	if o == nil || o.Pbkdf2iters == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Pbkdf2iters
}

// GetPbkdf2itersOk returns a tuple with the Pbkdf2iters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetPbkdf2itersOk() (*CompositeValue, bool) {
	if o == nil || o.Pbkdf2iters == nil {
		return nil, false
	}
	return o.Pbkdf2iters, true
}

// HasPbkdf2iters returns a boolean if a field has been set.
func (o *Dataset) HasPbkdf2iters() bool {
	if o != nil && o.Pbkdf2iters != nil {
		return true
	}

	return false
}

// SetPbkdf2iters gets a reference to the given CompositeValue and assigns it to the Pbkdf2iters field.
func (o *Dataset) SetPbkdf2iters(v CompositeValue) {
	o.Pbkdf2iters = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *Dataset) GetOrigin() CompositeValue {
	if o == nil || o.Origin == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetOriginOk() (*CompositeValue, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *Dataset) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given CompositeValue and assigns it to the Origin field.
func (o *Dataset) SetOrigin(v CompositeValue) {
	o.Origin = &v
}

// GetXattr returns the Xattr field value if set, zero value otherwise.
func (o *Dataset) GetXattr() CompositeValue {
	if o == nil || o.Xattr == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Xattr
}

// GetXattrOk returns a tuple with the Xattr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetXattrOk() (*CompositeValue, bool) {
	if o == nil || o.Xattr == nil {
		return nil, false
	}
	return o.Xattr, true
}

// HasXattr returns a boolean if a field has been set.
func (o *Dataset) HasXattr() bool {
	if o != nil && o.Xattr != nil {
		return true
	}

	return false
}

// SetXattr gets a reference to the given CompositeValue and assigns it to the Xattr field.
func (o *Dataset) SetXattr(v CompositeValue) {
	o.Xattr = &v
}

// GetVolsize returns the Volsize field value if set, zero value otherwise.
func (o *Dataset) GetVolsize() CompositeValue {
	if o == nil || o.Volsize == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Volsize
}

// GetVolsizeOk returns a tuple with the Volsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetVolsizeOk() (*CompositeValue, bool) {
	if o == nil || o.Volsize == nil {
		return nil, false
	}
	return o.Volsize, true
}

// HasVolsize returns a boolean if a field has been set.
func (o *Dataset) HasVolsize() bool {
	if o != nil && o.Volsize != nil {
		return true
	}

	return false
}

// SetVolsize gets a reference to the given CompositeValue and assigns it to the Volsize field.
func (o *Dataset) SetVolsize(v CompositeValue) {
	o.Volsize = &v
}

// GetVolblocksize returns the Volblocksize field value if set, zero value otherwise.
func (o *Dataset) GetVolblocksize() CompositeValue {
	if o == nil || o.Volblocksize == nil {
		var ret CompositeValue
		return ret
	}
	return *o.Volblocksize
}

// GetVolblocksizeOk returns a tuple with the Volblocksize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset) GetVolblocksizeOk() (*CompositeValue, bool) {
	if o == nil || o.Volblocksize == nil {
		return nil, false
	}
	return o.Volblocksize, true
}

// HasVolblocksize returns a boolean if a field has been set.
func (o *Dataset) HasVolblocksize() bool {
	if o != nil && o.Volblocksize != nil {
		return true
	}

	return false
}

// SetVolblocksize gets a reference to the given CompositeValue and assigns it to the Volblocksize field.
func (o *Dataset) SetVolblocksize(v CompositeValue) {
	o.Volblocksize = &v
}

func (o Dataset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["pool"] = o.Pool
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Mountpoint != nil {
		toSerialize["mountpoint"] = o.Mountpoint
	}
	if o.Encrypted != nil {
		toSerialize["encrypted"] = o.Encrypted
	}
	if o.EncryptionRoot != nil {
		toSerialize["encryption_root"] = o.EncryptionRoot
	}
	if o.KeyLoaded != nil {
		toSerialize["key_loaded"] = o.KeyLoaded
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.EncryptionAlgorithm != nil {
		toSerialize["encryption_algorithm"] = o.EncryptionAlgorithm
	}
	if o.Aclmode != nil {
		toSerialize["aclmode"] = o.Aclmode
	}
	if o.Acltype != nil {
		toSerialize["acltype"] = o.Acltype
	}
	if o.Atime != nil {
		toSerialize["atime"] = o.Atime
	}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	if o.Casesensitivity != nil {
		toSerialize["casesensitivity"] = o.Casesensitivity
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.Compression != nil {
		toSerialize["compression"] = o.Compression
	}
	if o.Deduplication != nil {
		toSerialize["deduplication"] = o.Deduplication
	}
	if o.Exec != nil {
		toSerialize["exec"] = o.Exec
	}
	if o.KeyFormat != nil {
		toSerialize["key_format"] = o.KeyFormat
	}
	if o.Managedby != nil {
		toSerialize["managedby"] = o.Managedby
	}
	if o.Copies != nil {
		toSerialize["copies"] = o.Copies
	}
	if o.Quota != nil {
		toSerialize["quota"] = o.Quota
	}
	if o.QuotaCritical != nil {
		toSerialize["quota_critical"] = o.QuotaCritical
	}
	if o.QuotaWarning != nil {
		toSerialize["quota_warning"] = o.QuotaWarning
	}
	if o.Reservation != nil {
		toSerialize["reservation"] = o.Reservation
	}
	if o.Refreservation != nil {
		toSerialize["refreservation"] = o.Refreservation
	}
	if o.Refquota != nil {
		toSerialize["refquota"] = o.Refquota
	}
	if o.RefquotaCritical != nil {
		toSerialize["refquota_critical"] = o.RefquotaCritical
	}
	if o.RefquotaWarning != nil {
		toSerialize["refquota_warning"] = o.RefquotaWarning
	}
	if o.Readonly != nil {
		toSerialize["readonly"] = o.Readonly
	}
	if o.Recordsize != nil {
		toSerialize["recordsize"] = o.Recordsize
	}
	if o.Sync != nil {
		toSerialize["sync"] = o.Sync
	}
	if o.Snapdir != nil {
		toSerialize["snapdir"] = o.Snapdir
	}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	if o.Pbkdf2iters != nil {
		toSerialize["pbkdf2iters"] = o.Pbkdf2iters
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	if o.Xattr != nil {
		toSerialize["xattr"] = o.Xattr
	}
	if o.Volsize != nil {
		toSerialize["volsize"] = o.Volsize
	}
	if o.Volblocksize != nil {
		toSerialize["volblocksize"] = o.Volblocksize
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Dataset) UnmarshalJSON(bytes []byte) (err error) {
	varDataset := _Dataset{}

	if err = json.Unmarshal(bytes, &varDataset); err == nil {
		*o = Dataset(varDataset)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "pool")
		delete(additionalProperties, "type")
		delete(additionalProperties, "mountpoint")
		delete(additionalProperties, "encrypted")
		delete(additionalProperties, "encryption_root")
		delete(additionalProperties, "key_loaded")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "encryption_algorithm")
		delete(additionalProperties, "aclmode")
		delete(additionalProperties, "acltype")
		delete(additionalProperties, "atime")
		delete(additionalProperties, "available")
		delete(additionalProperties, "casesensitivity")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "compression")
		delete(additionalProperties, "deduplication")
		delete(additionalProperties, "exec")
		delete(additionalProperties, "key_format")
		delete(additionalProperties, "managedby")
		delete(additionalProperties, "copies")
		delete(additionalProperties, "quota")
		delete(additionalProperties, "quota_critical")
		delete(additionalProperties, "quota_warning")
		delete(additionalProperties, "reservation")
		delete(additionalProperties, "refreservation")
		delete(additionalProperties, "refquota")
		delete(additionalProperties, "refquota_critical")
		delete(additionalProperties, "refquota_warning")
		delete(additionalProperties, "readonly")
		delete(additionalProperties, "recordsize")
		delete(additionalProperties, "sync")
		delete(additionalProperties, "snapdir")
		delete(additionalProperties, "used")
		delete(additionalProperties, "pbkdf2iters")
		delete(additionalProperties, "origin")
		delete(additionalProperties, "xattr")
		delete(additionalProperties, "volsize")
		delete(additionalProperties, "volblocksize")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataset struct {
	value *Dataset
	isSet bool
}

func (v NullableDataset) Get() *Dataset {
	return v.value
}

func (v *NullableDataset) Set(val *Dataset) {
	v.value = val
	v.isSet = true
}

func (v NullableDataset) IsSet() bool {
	return v.isSet
}

func (v *NullableDataset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataset(val *Dataset) *NullableDataset {
	return &NullableDataset{value: val, isSet: true}
}

func (v NullableDataset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


