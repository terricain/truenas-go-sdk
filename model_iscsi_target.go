/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// ISCSITarget struct for ISCSITarget
type ISCSITarget struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Alias NullableString `json:"alias,omitempty"`
	Mode *string `json:"mode,omitempty"`
	Groups []ISCSITargetGroupsInner `json:"groups,omitempty"`
}

// NewISCSITarget instantiates a new ISCSITarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewISCSITarget() *ISCSITarget {
	this := ISCSITarget{}
	return &this
}

// NewISCSITargetWithDefaults instantiates a new ISCSITarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewISCSITargetWithDefaults() *ISCSITarget {
	this := ISCSITarget{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ISCSITarget) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ISCSITarget) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ISCSITarget) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ISCSITarget) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ISCSITarget) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ISCSITarget) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ISCSITarget) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ISCSITarget) SetName(v string) {
	o.Name = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ISCSITarget) GetAlias() string {
	if o == nil || o.Alias.Get() == nil {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ISCSITarget) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *ISCSITarget) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *ISCSITarget) SetAlias(v string) {
	o.Alias.Set(&v)
}
// SetAliasNil sets the value for Alias to be an explicit nil
func (o *ISCSITarget) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *ISCSITarget) UnsetAlias() {
	o.Alias.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ISCSITarget) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ISCSITarget) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ISCSITarget) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *ISCSITarget) SetMode(v string) {
	o.Mode = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *ISCSITarget) GetGroups() []ISCSITargetGroupsInner {
	if o == nil || o.Groups == nil {
		var ret []ISCSITargetGroupsInner
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ISCSITarget) GetGroupsOk() ([]ISCSITargetGroupsInner, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *ISCSITarget) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []ISCSITargetGroupsInner and assigns it to the Groups field.
func (o *ISCSITarget) SetGroups(v []ISCSITargetGroupsInner) {
	o.Groups = v
}

func (o ISCSITarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	return json.Marshal(toSerialize)
}

type NullableISCSITarget struct {
	value *ISCSITarget
	isSet bool
}

func (v NullableISCSITarget) Get() *ISCSITarget {
	return v.value
}

func (v *NullableISCSITarget) Set(val *ISCSITarget) {
	v.value = val
	v.isSet = true
}

func (v NullableISCSITarget) IsSet() bool {
	return v.isSet
}

func (v *NullableISCSITarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableISCSITarget(val *ISCSITarget) *NullableISCSITarget {
	return &NullableISCSITarget{value: val, isSet: true}
}

func (v NullableISCSITarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableISCSITarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


